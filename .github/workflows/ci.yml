name: CI/CD Pipeline - Ozza-Reboot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm lint
        
      - name: Run TypeScript type check
        run: pnpm tsc --noEmit

  # Accessibility and i18n Testing
  accessibility-testing:
    name: Accessibility & i18n Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium firefox
        
      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: test
          NEXT_PUBLIC_DEFAULT_LOCALE: en
          
      - name: Run accessibility tests
        run: pnpm exec playwright test --project=accessibility-chrome --project=accessibility-firefox
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          
      - name: Run i18n tests
        run: pnpm exec playwright test --project=i18n-spanish --project=i18n-french
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7
          
      - name: Comment accessibility results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results
            const resultsPath = 'test-results/e2e-results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const accessibilityTests = results.suites.filter(suite => 
                suite.title.includes('Accessibility') || suite.title.includes('i18n')
              );
              
              let comment = '## 🔍 Accessibility & i18n Test Results\n\n';
              
              if (accessibilityTests.length > 0) {
                const passed = accessibilityTests.filter(test => test.outcome === 'passed').length;
                const failed = accessibilityTests.filter(test => test.outcome === 'failed').length;
                
                comment += `- ✅ **${passed}** tests passed\n`;
                comment += `- ❌ **${failed}** tests failed\n\n`;
                
                if (failed > 0) {
                  comment += '### Failed Tests:\n';
                  accessibilityTests
                    .filter(test => test.outcome === 'failed')
                    .forEach(test => {
                      comment += `- ${test.title}\n`;
                    });
                }
                
                comment += '\n📊 [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
              } else {
                comment += 'No accessibility tests found in results.';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
        
      - name: Run TypeScript check
        run: pnpm tsc --noEmit

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        run: pnpm test:unit
        env:
          NODE_ENV: test
          LLM_PROVIDER: xai
          XAI_MODEL_ID: grok-4-0709
          XAI_API_KEY: test-xai-key
          OPENAI_API_KEY: test-openai-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          BETTER_AUTH_SECRET: test-secret-key-for-ci-testing-only
          SENTRY_DSN: https://test@sentry.io/test
          POSTHOG_KEY: test-posthog-key
          UPSTASH_REDIS_REST_URL: http://localhost:6379
          UPSTASH_REDIS_REST_TOKEN: test-token
          
      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            test-results/
            coverage/

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup test database
        run: pnpm test:setup
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          
      - name: Run database migrations
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          
      - name: Run integration tests
        run: pnpm test:integration
        env:
          NODE_ENV: test
          LLM_PROVIDER: xai
          XAI_MODEL_ID: grok-4-0709
          XAI_API_KEY: test-xai-key
          OPENAI_API_KEY: test-openai-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          BETTER_AUTH_SECRET: test-secret-key-for-ci-testing-only
          SENTRY_DSN: https://test@sentry.io/test
          POSTHOG_KEY: test-posthog-key
          UPSTASH_REDIS_REST_URL: http://localhost:6379
          UPSTASH_REDIS_REST_TOKEN: test-token
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
        
      - name: Setup test database
        run: pnpm test:setup
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          
      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          LLM_PROVIDER: xai
          XAI_MODEL_ID: grok-4-0709
          XAI_API_KEY: test-xai-key
          OPENAI_API_KEY: test-openai-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          BETTER_AUTH_SECRET: test-secret-key-for-ci-testing-only
          SENTRY_DSN: https://test@sentry.io/test
          POSTHOG_KEY: test-posthog-key
          
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          LLM_PROVIDER: xai
          XAI_MODEL_ID: grok-4-0709
          XAI_API_KEY: test-xai-key
          OPENAI_API_KEY: test-openai-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          BETTER_AUTH_SECRET: test-secret-key-for-ci-testing-only
          SENTRY_DSN: https://test@sentry.io/test
          POSTHOG_KEY: test-posthog-key
          UPSTASH_REDIS_REST_URL: http://localhost:6379
          UPSTASH_REDIS_REST_TOKEN: test-token
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # Coverage Report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup test database
        run: pnpm test:setup
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          
      - name: Run tests with coverage
        run: pnpm test:coverage
        env:
          NODE_ENV: test
          LLM_PROVIDER: xai
          XAI_MODEL_ID: grok-4-0709
          XAI_API_KEY: test-xai-key
          OPENAI_API_KEY: test-openai-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          BETTER_AUTH_SECRET: test-secret-key-for-ci-testing-only
          SENTRY_DSN: https://test@sentry.io/test
          POSTHOG_KEY: test-posthog-key
          UPSTASH_REDIS_REST_URL: http://localhost:6379
          UPSTASH_REDIS_REST_TOKEN: test-token
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true
          
      - name: Coverage threshold check
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold of 80%"
            exit 1
          fi

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run npm audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
        
      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-unit, test-integration]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          LLM_PROVIDER: xai
          XAI_MODEL_ID: grok-4-0709
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-e2e, security]
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: staging.ozza.ai

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-e2e, security, coverage]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Post-deployment health check
        run: |
          sleep 30
          curl -f https://ozza.ai/api/health || exit 1

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '✅ Ozza-Reboot deployment successful with Grok 4 integration!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ Ozza-Reboot deployment failed. Check the logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
