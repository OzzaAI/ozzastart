---
description: Role INstructions to help with product thinking
globs: 
alwaysApply: false
---
{
  "$schema": "https://raw.githubusercontent.com/getcursor/chains/main/schemas/mdc.schema.json",
  "title": "Ozza LLM Product Perspective Guidelines (Conceptual Cursor Rules)",
  "description": "A mental‑compass ruleset (MVP scope) that frames how the LLM should reason about changes in the Ozza monorepo—covering user‑role hierarchy, multi‑tenancy, white‑label branding, RBAC/RLS security, additive‑only schema evolution, shared‑core architecture, plan‑based feature gating, and blueprint‑alignment heuristics.",
  "body": "# Ozza LLM Product Perspective Guidelines (Conceptual Cursor Rules)\n\n## Mental Models & User Roles  \n**Hierarchical User Ecosystem:** Always frame design decisions around Ozza’s multi‑level user model connecting **Coaches**, **Agencies**, and **SMB (small business) clients**. Coaches bring in and mentor agencies, agencies serve SMB clients using Ozza’s platform tools, and SMBs receive the end product (e.g. websites) without directly interacting with Ozza. This hierarchy means every feature or change should be evaluated in terms of how it supports this coach→agency→SMB flow and value chain (Ozza empowers coaches → coaches empower agencies → agencies deliver value to SMBs).\n\n**User Roles & Permissions:** Keep in mind the distinct roles and their access levels defined in the blueprint:  \n- **Coach:** A partner/mentor user who oversees multiple agencies. Coaches have a dedicated **Coach Dashboard** to view high‑level metrics for their agencies and can switch into an “assist mode” for an agency in a limited, read‑only capacity. By default a coach **cannot** modify an agency’s content or see sensitive SMB client details unless the agency explicitly grants deeper access (this **Blind‑Mode privacy** is enabled by default to hide client identities). Coaches act as advisors – they invite new agencies, provide guidance, and support, but **never take unilateral actions** in an agency’s account without consent. Every design should respect that coaches *guide rather than control* agencies.  \n- **Agency Owner/Admin:** The primary tenant user – typically the agency’s founder or admin – with full control over that agency’s workspace. Agencies are Ozza’s direct customers and use the platform to build websites/marketing projects for their SMB clients. An Agency Owner can create and manage SMB client projects (e.g. websites), invite team members, manage billing, and decide what data to share with their coach. Crucially, the agency can **enable or disable sharing of sensitive client info with the coach** (“blind mode” on means the coach sees anonymized data).  \n- **Agency Team Member:** Agency staff users (designers, developers, etc.) with permissions set by the Agency Owner. They help build and manage client projects but usually cannot change global settings or billing and do not directly interact with coaches via the platform.  \n- **SMB Client (End‑Client):** Small‑business end customers **do not have direct logins on Ozza** in the MVP. They only see the agency‑branded outputs; the platform must remain fully white‑label toward them.\n\n**Mindset for Features:** Whenever building or editing, ask which role this primarily serves, how it affects the others, and whether it upholds security, onboarding speed, plan enforcement, and user clarity.\n\n---\n\n## Architectural Perspective & Product Principles\n- **Strict Multi‑Tenancy & Data Isolation:** One shared platform, per‑tenant isolation via schema/RLS; absolutely no tenant‑specific branches.\n- **White‑Label Branding:** All SMB‑facing artifacts carry the agency’s branding; Ozza stays invisible by default.\n- **Security / RBAC / Blind‑Mode:** Enforce least‑privilege, audit privileged access, default coach views are anonymized unless agency opts in.\n- **Additive‑Only Schema Evolution:** Never drop/rename tables; extend instead. CI hooks block destructive migrations.\n- **Shared‑Core Monorepo:** Reuse components and patterns; keep logic DRY; reflect changes across front‑end, Edge Functions, and DB types together.\n- **Plan‑Based Feature Access:** All gated capacity/feature differences drive off plan limits or `account_features`; no hard‑coded tenant toggles.\n- **Robust CI/CD Safeguards:** Embrace tests, lint, and hooks; if they fail, refine design not pipeline.\n\n---\n\n## Design & Implementation Heuristics\n1. **Think Product‑First:** Evaluate every change for onboarding UX, security, plan compliance, and user clarity.\n2. **Blueprint Alignment With Documented Exceptions:** Default to blueprint directives; if a pivot is essential, document which rule, why, and how it better meets business goals, then proceed.\n3. **Favor Reuse & Modularity:** Extend existing abstractions; avoid duplication; refactor when improving clarity.\n4. **End‑to‑End Ownership:** Consider impact from database to UI and deployment; keep the solution holistic and MVP‑scoped.\n\n> Treat these notes as a **mental compass**, not executable policy. They should shape the LLM’s reasoning when working in Cursor—ensuring every implementation choice advances Ozza’s MVP in line with its multi‑tenant, security‑first, coach→agency→SMB vision."
}

